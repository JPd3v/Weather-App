(()=>{"use strict";var r={426:(r,n,e)=>{e.d(n,{Z:()=>c});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),a.push([r.id,":root {\r\n  --principal-color: rgb(55 54 54);\r\n  --second-color: rgb(255, 255, 255);\r\n  --third-color: rgb(90, 0, 255);\r\n  --error-color: rgb(255, 77, 77);\r\n}\r\n\r\n* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  font-size: 62.5%;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody {\r\n  background-color: var(--principal-color);\r\n  font-size: 1.6rem;\r\n}\r\n\r\n.app-wrapper {\r\n  display: grid;\r\n  grid-template-rows: auto 1fr;\r\n  height: 100vh;\r\n}\r\n\r\nform {\r\n  color: var(--second-color);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 20px;\r\n}\r\n\r\nform button {\r\n  border: none;\r\n  background: none;\r\n  cursor: pointer;\r\n}\r\n\r\nform > label {\r\n  position: relative;\r\n}\r\n\r\nform > label > span {\r\n  position: absolute;\r\n  top: 28px;\r\n  right: 8px;\r\n}\r\n\r\nform input {\r\n  appearance: none;\r\n  color: var(--second-color);\r\n  background-color: var(--principal-color);\r\n  border: none;\r\n  border-bottom: 2px solid var(--third-color);\r\n  outline: none;\r\n  margin-left: 15px;\r\n  font-family: inherit;\r\n  font-size: 1.6rem;\r\n}\r\n\r\nform input:focus:invalid {\r\n  border-bottom: 2px solid var(--error-color);\r\n}\r\n\r\n.city-input-error {\r\n  color: var(--error-color);\r\n}\r\n\r\n.city-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  justify-content: center;\r\n  color: var(--second-color);\r\n  font-size: 2rem;\r\n  align-items: center;\r\n}\r\n\r\n.city {\r\n  width: auto;\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  grid-template-rows: 1fr 1fr;\r\n  text-align: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.city-name {\r\n  display: flex;\r\n  gap: 10px;\r\n  grid-column: 1/3;\r\n  justify-content: center;\r\n  border-bottom: 2px solid var(--third-color);\r\n}\r\n\r\n.city-temp {\r\n  grid-row: 2/4;\r\n  font-size: 5rem;\r\n  font-weight: 900;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,gCAAgC;EAChC,kCAAkC;EAClC,8BAA8B;EAC9B,+BAA+B;AACjC;;AAEA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,iCAAiC;AACnC;;AAEA;EACE,wCAAwC;EACxC,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,4BAA4B;EAC5B,aAAa;AACf;;AAEA;EACE,0BAA0B;EAC1B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,0BAA0B;EAC1B,wCAAwC;EACxC,YAAY;EACZ,2CAA2C;EAC3C,aAAa;EACb,iBAAiB;EACjB,oBAAoB;EACpB,iBAAiB;AACnB;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,uBAAuB;EACvB,0BAA0B;EAC1B,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,2BAA2B;EAC3B,kBAAkB;EAClB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,SAAS;EACT,gBAAgB;EAChB,uBAAuB;EACvB,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,eAAe;EACf,gBAAgB;AAClB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\r\n\r\n:root {\r\n  --principal-color: rgb(55 54 54);\r\n  --second-color: rgb(255, 255, 255);\r\n  --third-color: rgb(90, 0, 255);\r\n  --error-color: rgb(255, 77, 77);\r\n}\r\n\r\n* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  font-size: 62.5%;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody {\r\n  background-color: var(--principal-color);\r\n  font-size: 1.6rem;\r\n}\r\n\r\n.app-wrapper {\r\n  display: grid;\r\n  grid-template-rows: auto 1fr;\r\n  height: 100vh;\r\n}\r\n\r\nform {\r\n  color: var(--second-color);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 20px;\r\n}\r\n\r\nform button {\r\n  border: none;\r\n  background: none;\r\n  cursor: pointer;\r\n}\r\n\r\nform > label {\r\n  position: relative;\r\n}\r\n\r\nform > label > span {\r\n  position: absolute;\r\n  top: 28px;\r\n  right: 8px;\r\n}\r\n\r\nform input {\r\n  appearance: none;\r\n  color: var(--second-color);\r\n  background-color: var(--principal-color);\r\n  border: none;\r\n  border-bottom: 2px solid var(--third-color);\r\n  outline: none;\r\n  margin-left: 15px;\r\n  font-family: inherit;\r\n  font-size: 1.6rem;\r\n}\r\n\r\nform input:focus:invalid {\r\n  border-bottom: 2px solid var(--error-color);\r\n}\r\n\r\n.city-input-error {\r\n  color: var(--error-color);\r\n}\r\n\r\n.city-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  justify-content: center;\r\n  color: var(--second-color);\r\n  font-size: 2rem;\r\n  align-items: center;\r\n}\r\n\r\n.city {\r\n  width: auto;\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  grid-template-rows: 1fr 1fr;\r\n  text-align: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.city-name {\r\n  display: flex;\r\n  gap: 10px;\r\n  grid-column: 1/3;\r\n  justify-content: center;\r\n  border-bottom: 2px solid var(--third-color);\r\n}\r\n\r\n.city-temp {\r\n  grid-row: 2/4;\r\n  font-size: 5rem;\r\n  font-weight: 900;\r\n}\r\n"],sourceRoot:""}]);const c=a},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var A=0;A<r.length;A++){var l=[].concat(r[A]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=e.sources.map((function(r){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(r," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var i={},a=[],c=0;c<r.length;c++){var s=r[c],A=t.base?s[0]+t.base:s[0],l=i[A]||0,p="".concat(A," ").concat(l);i[A]=l+1;var d=e(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(u);else{var f=o(u,t);t.byIndex=c,n.splice(c,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var c=e(i[a]);n[c].references--}for(var s=t(r,o),A=0;A<i.length;A++){var l=e(i[A]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return r[t](i,i.exports,e),i.exports}e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),e.nc=void 0,(()=>{var r=e(379),n=e.n(r),t=e(795),o=e.n(t),i=e(569),a=e.n(i),c=e(565),s=e.n(c),A=e(216),l=e.n(A),p=e(589),d=e.n(p),u=e(426),f={};f.styleTagTransform=d(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m={events:{},subscribe(r,n){this.events[r]=this.events[r]||[],this.events[r].push(n)},unsubscribe(r,n){this.events[r]&&(this.events[r]=this.events[r].filter((r=>r!==n)))},publish(r,n){this.events[r]&&this.events[r].forEach((r=>{r(n)}))}};async function C(r){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${r}&APPID=8932cda987fbe6ffc7bc17f39a224ad2&units=metric`,{mode:"cors"}),e=await n.json();m.publish("city found",function(r){return{name:r.name,country:r.sys.country,temp:Math.round(r.main.temp),humidity:r.main.humidity,weather_description:r.weather[0].description}}(e))}catch(r){m.publish("city not found")}}C("london"),m.subscribe("search city",C);const E=document.querySelector("form"),v=document.querySelector("#city"),h=document.querySelector(".city-container"),y=document.querySelector(".city-input-error");function g(){v.validity.valueMissing&&(y.textContent="please enter a city name"),v.validity.valid&&(y.textContent="")}v.addEventListener("focusout",g),E.addEventListener("submit",(r=>{var n;v.validity.valid?(n=v.value,m.publish("search city",n),v.value="",r.preventDefault()):(g(),r.preventDefault())})),m.subscribe("city found",(function(){h.innerHTML=""})),m.subscribe("city found",(function(r){const n=document.createElement("div"),e=document.createElement("div"),t=document.createElement("h2"),o=document.createElement("div"),i=document.createElement("div"),a=document.createElement("div"),c=document.createElement("div");n.classList.add("city"),e.classList.add("city-name"),i.classList.add("city-temp"),t.textContent=r.name,o.textContent=r.country,i.textContent=`${r.temp} °C`,a.textContent=`Humidity: ${r.humidity} %`,c.textContent=r.weather_description,h.appendChild(n),n.appendChild(e),e.appendChild(t),e.appendChild(o),n.appendChild(i),n.appendChild(a),n.appendChild(c)})),m.subscribe("city not found",(function(){y.textContent="city not found, check typo errors"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,